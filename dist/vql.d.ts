// Generated by dts-bundle-generator v9.5.1

export type Id = string;
/** Logical Operators */
export type LogicalOperators = {
	/**
	 * Recursively applies multiple conditions, all of which must evaluate to true.
	 * Can include other operators such as $gt, $exists, or nested $and/$or conditions.
	 */
	$and?: Array<SearchOptions>;
	/**
	 * Recursively applies multiple conditions, at least one of which must evaluate to true.
	 * Can include other operators such as $lt, $type, or nested $and/$or conditions.
	 */
	$or?: Array<SearchOptions>;
	/**
	 * Negates a single condition.
	 * Can include any other operator as its value.
	 */
	$not?: SearchOptions;
};
/** Comparison Operators */
export type ComparisonOperators = {
	$gt?: Record<string, number>;
	$lt?: Record<string, number>;
	$gte?: Record<string, number>;
	$lte?: Record<string, number>;
	$in?: Record<string, any[]>;
	$nin?: Record<string, any[]>;
	$between?: Record<string, [
		number,
		number
	]>;
};
/** Type and Existence Operators */
export type TypeAndExistenceOperators = {
	$exists?: Record<string, boolean>;
	$type?: Record<string, string>;
};
/** Array Operators */
export type ArrayOperators = {
	$arrinc?: Record<string, any[]>;
	$arrincall?: Record<string, any[]>;
	$size?: Record<string, number>;
};
/** String Operators */
export type StringOperators = {
	$regex?: Record<string, RegExp>;
	$startsWith?: Record<string, string>;
	$endsWith?: Record<string, string>;
};
/** Other Operators */
export type OtherOperators = {
	$subset?: Record<string, any>;
};
/** Predefined Search Operators */
export type PredefinedSearchOperators = LogicalOperators & ComparisonOperators & TypeAndExistenceOperators & ArrayOperators & StringOperators & OtherOperators;
/**
 * SearchOptions can be either a function or an object with predefined operators.
 */
export type SearchOptions = PredefinedSearchOperators & Arg;
export interface VContext {
	[key: string]: any;
}
/**
 * Predefined type for updating data.
 */
/** Arrays */
export type ArrayUpdater = {
	$push?: any;
	/** Pushes items into an array and removes duplicates */
	$pushset?: any;
	$pull?: any;
	$pullall?: any;
};
/** Objects */
export type ObjectUpdater = {
	$merge?: any;
};
/** Values */
export type ValueUpdater = {
	$set?: any;
	$inc?: any;
	$dec?: any;
	$unset?: any;
	$rename?: any;
};
export type UpdaterArg = ArrayUpdater & ObjectUpdater & ValueUpdater & {
	[key: string]: any;
};
export interface Arg {
	_id?: Id;
	[key: string]: any;
}
export type SearchFunc<T = any> = (data: T, context: VContext) => boolean;
export type UpdaterFunc<T = any> = (data: T, context: VContext) => boolean;
export type Search<T = any> = SearchOptions | SearchFunc<T>;
export type Updater<T = any> = UpdaterArg | UpdaterArg[] | UpdaterFunc<T>;
export interface Data {
	[key: string]: any;
}
export interface DbFindOpts {
	reverse?: boolean;
	max?: number;
	offset?: number;
	sortBy?: string;
	sortAsc?: boolean;
}
export interface FindOpts {
	select?: string[];
	exclude?: string[];
	transform?: Function;
}
declare class CollectionManager {
	private db;
	private collection;
	constructor(db: ValtheraCompatible, collection: string);
	/**
	 * Add data to a database.
	 */
	add<T = Data>(data: Arg, id_gen?: boolean): Promise<T>;
	/**
	 * Find data in a database.
	 */
	find<T = Data>(search: Search, context?: VContext, options?: DbFindOpts, findOpts?: FindOpts): Promise<T[]>;
	/**
	 * Find one data entry in a database.
	 */
	findOne<T = Data>(search: Search, context?: VContext, findOpts?: FindOpts): Promise<T>;
	/**
	 * Update data in a database.
	 */
	update(search: Search, updater: Updater, context?: VContext): Promise<boolean>;
	/**
	 * Update one data entry in a database.
	 */
	updateOne(search: Search, updater: Updater, context?: VContext): Promise<boolean>;
	/**
	 * Remove data from a database.
	 */
	remove(search: Search, context?: VContext): Promise<boolean>;
	/**
	 * Remove one data entry from a database.
	 */
	removeOne(search: Search, context?: VContext): Promise<boolean>;
	/**
	 * Asynchronously updates one entry in a database or adds a new one if it doesn't exist.
	 */
	updateOneOrAdd(search: Search, updater: Updater, add_arg?: Arg, context?: VContext, id_gen?: boolean): Promise<boolean>;
}
export interface ValtheraCompatible {
	c(collection: string): CollectionManager;
	getCollections(): Promise<string[]>;
	checkCollection(collection: string): Promise<boolean>;
	issetCollection(collection: string): Promise<boolean>;
	add<T = Data>(collection: string, data: Arg, id_gen?: boolean): Promise<T>;
	find<T = Data>(collection: string, search: Search, context?: VContext, options?: DbFindOpts, findOpts?: FindOpts): Promise<T[]>;
	findOne<T = Data>(collection: string, search: Search, context?: VContext, findOpts?: FindOpts): Promise<T | null>;
	update(collection: string, search: Search, updater: Updater, context?: VContext): Promise<boolean>;
	updateOne(collection: string, search: Search, updater: Updater, context?: VContext): Promise<boolean>;
	remove(collection: string, search: Search, context?: VContext): Promise<boolean>;
	removeOne(collection: string, search: Search, context?: VContext): Promise<boolean>;
	removeCollection(collection: string): Promise<boolean>;
	updateOneOrAdd(collection: string, search: Search, updater: Updater, add_arg?: Arg, context?: VContext, id_gen?: boolean): Promise<boolean>;
}
declare namespace RelationTypes {
	type Path = [
		string,
		string
	];
	type FieldPath = string[];
	interface DBS {
		[key: string]: ValtheraCompatible;
	}
	interface Relation {
		[key: string]: RelationConfig;
	}
	interface RelationConfig {
		path: Path;
		pk?: string;
		fk?: string;
		as?: string;
		select?: string[];
		findOpts?: DbFindOpts;
		type?: "1" | "11" | "1n" | "nm";
		relations?: Relation;
		through?: {
			table: string;
			db?: string;
			pk: string;
			fk: string;
		};
	}
}
export type VQLQuery = {
	find: VQLFind;
	findOne: VQLFindOne;
	f: VQLFindOne;
	add: VQLAdd;
	update: VQLUpdate;
	updateOne: VQLUpdateOne;
	remove: VQLRemove;
	removeOne: VQLRemoveOne;
	updateOneOrAdd: VQLUpdateOneOrAdd;
	removeCollection: VQLCollectionOperation;
	checkCollection: VQLCollectionOperation;
	issetCollection: VQLCollectionOperation;
	getCollections: {};
};
export type VQLQueryData = {
	find: VQLFind;
} | {
	findOne: VQLFindOne;
} | {
	f: VQLFindOne;
} | {
	add: VQLAdd;
} | {
	update: VQLUpdate;
} | {
	updateOne: VQLUpdateOne;
} | {
	remove: VQLRemove;
} | {
	removeOne: VQLRemoveOne;
} | {
	updateOneOrAdd: VQLUpdateOneOrAdd;
} | {
	removeCollection: VQLCollectionOperation;
} | {
	checkCollection: VQLCollectionOperation;
} | {
	issetCollection: VQLCollectionOperation;
} | {
	getCollections: {};
};
export interface VQLRequest {
	db: string;
	d: VQLQueryData;
}
export interface VQLFind {
	collection: string;
	search?: Search;
	limit?: number;
	fields?: VQLFields;
	select?: VQLFields;
	relations?: VQLRelations;
	options?: DbFindOpts;
	searchOpts?: FindOpts;
}
export interface VQLFindOne {
	collection: string;
	search: Search;
	fields?: VQLFields;
	select?: VQLFields;
	relations?: VQLRelations;
	searchOpts?: FindOpts;
}
export interface VQLAdd {
	collection: string;
	data: Arg;
	id_gen?: boolean;
}
export interface VQLUpdate {
	collection: string;
	search: Search;
	updater: UpdaterArg;
}
export interface VQLUpdateOne {
	collection: string;
	search: Search;
	updater: UpdaterArg;
}
export interface VQLRemove {
	collection: string;
	search: Search;
}
export interface VQLRemoveOne {
	collection: string;
	search: Search;
}
export interface VQLUpdateOneOrAdd {
	collection: string;
	search: Search;
	updater: UpdaterArg;
	add_arg?: Arg;
	id_gen?: boolean;
}
export interface VQLCollectionOperation {
	collection: string;
}
export type VQLFields = Record<string, boolean | number> | string[];
export type VQLRelations = Record<string, VQLFind | VQLFindOne>;
export interface RelationQuery {
	r: {
		path: RelationTypes.Path;
		search: Search;
		relations: RelationTypes.Relation;
		many?: boolean;
		options?: DbFindOpts;
		select?: RelationTypes.FieldPath[];
	};
}
export interface VQLRef {
	ref?: string;
	var?: {
		[k: string]: any;
	};
}
export type VQLRefRequired = VQLRef & Required<Pick<VQLRef, "ref">>;
export type DeepPartial<T> = {
	[P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};
export type VQL = (VQLRequest | RelationQuery) & VQLRef;
export type VQLR = VQL | (DeepPartial<VQL> & VQLRefRequired) | VQLRefRequired;
export interface VQLError {
	err: true;
	msg: string;
	c: number;
	why?: string;
}
export type VqlQueryRaw = VQLR | string | {
	query: string;
} & VQLRef;

export {};
